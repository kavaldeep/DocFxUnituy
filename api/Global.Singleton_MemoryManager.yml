### YamlMime:ManagedReference
items:
- uid: Global.Singleton_MemoryManager
  commentId: T:Global.Singleton_MemoryManager
  id: Singleton_MemoryManager
  parent: Global
  children:
  - Global.Singleton_MemoryManager.ClearMemory
  - Global.Singleton_MemoryManager.imageFolderPath
  - Global.Singleton_MemoryManager.loaded
  - Global.Singleton_MemoryManager.messageFolderPath
  - Global.Singleton_MemoryManager.RunCustomUpdate
  - Global.Singleton_MemoryManager.seriesFolderPath
  - Global.Singleton_MemoryManager.shouldClearFrequently
  - Global.Singleton_MemoryManager.ShouldClearFrequently
  - Global.Singleton_MemoryManager.Start
  langs:
  - csharp
  - vb
  name: Singleton_MemoryManager
  nameWithType: Singleton_MemoryManager
  fullName: Singleton_MemoryManager
  type: Class
  source:
    id: Singleton_MemoryManager
    path: ''
    startLine: 19365
  assemblies:
  - cs.temp.dll
  namespace: Global
  summary: "\nMemory manager is here just to run a periodic cleaning of the memory\n"
  example: []
  syntax:
    content: 'public class Singleton_MemoryManager : Singleton<Singleton_MemoryManager>'
    content.vb: >-
      Public Class Singleton_MemoryManager
          Inherits Singleton(Of Singleton_MemoryManager)
  inheritance:
  - System.Object
  - Global.Singleton{Singleton_MemoryManager}
  inheritedMembers:
  - Global.Singleton{Singleton_MemoryManager}.Instance
  - Global.Singleton{Singleton_MemoryManager}.StartCoroutine(System.Collections.IEnumerator)
  - Global.Singleton{Singleton_MemoryManager}.AddCallbacks(System.Boolean,System.Boolean,System.Boolean)
  - Global.Singleton{Singleton_MemoryManager}.Awake
  - Global.Singleton{Singleton_MemoryManager}.Update
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Global.Singleton_MemoryManager.imageFolderPath
  commentId: P:Global.Singleton_MemoryManager.imageFolderPath
  id: imageFolderPath
  parent: Global.Singleton_MemoryManager
  langs:
  - csharp
  - vb
  name: imageFolderPath
  nameWithType: Singleton_MemoryManager.imageFolderPath
  fullName: Singleton_MemoryManager.imageFolderPath
  type: Property
  source:
    id: imageFolderPath
    path: ''
    startLine: 19374
  assemblies:
  - cs.temp.dll
  namespace: Global
  syntax:
    content: public static string imageFolderPath { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Shared ReadOnly Property imageFolderPath As String
  overload: Global.Singleton_MemoryManager.imageFolderPath*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Global.Singleton_MemoryManager.messageFolderPath
  commentId: P:Global.Singleton_MemoryManager.messageFolderPath
  id: messageFolderPath
  parent: Global.Singleton_MemoryManager
  langs:
  - csharp
  - vb
  name: messageFolderPath
  nameWithType: Singleton_MemoryManager.messageFolderPath
  fullName: Singleton_MemoryManager.messageFolderPath
  type: Property
  source:
    id: messageFolderPath
    path: ''
    startLine: 19379
  assemblies:
  - cs.temp.dll
  namespace: Global
  syntax:
    content: public static string messageFolderPath { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Shared ReadOnly Property messageFolderPath As String
  overload: Global.Singleton_MemoryManager.messageFolderPath*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Global.Singleton_MemoryManager.seriesFolderPath
  commentId: P:Global.Singleton_MemoryManager.seriesFolderPath
  id: seriesFolderPath
  parent: Global.Singleton_MemoryManager
  langs:
  - csharp
  - vb
  name: seriesFolderPath
  nameWithType: Singleton_MemoryManager.seriesFolderPath
  fullName: Singleton_MemoryManager.seriesFolderPath
  type: Property
  source:
    id: seriesFolderPath
    path: ''
    startLine: 19384
  assemblies:
  - cs.temp.dll
  namespace: Global
  syntax:
    content: public static string seriesFolderPath { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Shared ReadOnly Property seriesFolderPath As String
  overload: Global.Singleton_MemoryManager.seriesFolderPath*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Global.Singleton_MemoryManager.loaded
  commentId: P:Global.Singleton_MemoryManager.loaded
  id: loaded
  parent: Global.Singleton_MemoryManager
  langs:
  - csharp
  - vb
  name: loaded
  nameWithType: Singleton_MemoryManager.loaded
  fullName: Singleton_MemoryManager.loaded
  type: Property
  source:
    id: loaded
    path: ''
    startLine: 19389
  assemblies:
  - cs.temp.dll
  namespace: Global
  syntax:
    content: public bool loaded { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property loaded As Boolean
  overload: Global.Singleton_MemoryManager.loaded*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Global.Singleton_MemoryManager.shouldClearFrequently
  commentId: F:Global.Singleton_MemoryManager.shouldClearFrequently
  id: shouldClearFrequently
  parent: Global.Singleton_MemoryManager
  langs:
  - csharp
  - vb
  name: shouldClearFrequently
  nameWithType: Singleton_MemoryManager.shouldClearFrequently
  fullName: Singleton_MemoryManager.shouldClearFrequently
  type: Field
  source:
    id: shouldClearFrequently
    path: ''
    startLine: 19391
  assemblies:
  - cs.temp.dll
  namespace: Global
  syntax:
    content: public bool shouldClearFrequently
    return:
      type: System.Boolean
    content.vb: Public shouldClearFrequently As Boolean
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Global.Singleton_MemoryManager.ShouldClearFrequently
  commentId: P:Global.Singleton_MemoryManager.ShouldClearFrequently
  id: ShouldClearFrequently
  parent: Global.Singleton_MemoryManager
  langs:
  - csharp
  - vb
  name: ShouldClearFrequently
  nameWithType: Singleton_MemoryManager.ShouldClearFrequently
  fullName: Singleton_MemoryManager.ShouldClearFrequently
  type: Property
  source:
    id: ShouldClearFrequently
    path: ''
    startLine: 19393
  assemblies:
  - cs.temp.dll
  namespace: Global
  syntax:
    content: public bool ShouldClearFrequently { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property ShouldClearFrequently As Boolean
  overload: Global.Singleton_MemoryManager.ShouldClearFrequently*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Global.Singleton_MemoryManager.Start
  commentId: M:Global.Singleton_MemoryManager.Start
  id: Start
  parent: Global.Singleton_MemoryManager
  langs:
  - csharp
  - vb
  name: Start()
  nameWithType: Singleton_MemoryManager.Start()
  fullName: Singleton_MemoryManager.Start()
  type: Method
  source:
    id: Start
    path: ''
    startLine: 19411
  assemblies:
  - cs.temp.dll
  namespace: Global
  syntax:
    content: protected override void Start()
    content.vb: Protected Overrides Sub Start
  overridden: Global.Singleton{Singleton_MemoryManager}.Start
  overload: Global.Singleton_MemoryManager.Start*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: Global.Singleton_MemoryManager.RunCustomUpdate
  commentId: M:Global.Singleton_MemoryManager.RunCustomUpdate
  id: RunCustomUpdate
  parent: Global.Singleton_MemoryManager
  langs:
  - csharp
  - vb
  name: RunCustomUpdate()
  nameWithType: Singleton_MemoryManager.RunCustomUpdate()
  fullName: Singleton_MemoryManager.RunCustomUpdate()
  type: Method
  source:
    id: RunCustomUpdate
    path: ''
    startLine: 19416
  assemblies:
  - cs.temp.dll
  namespace: Global
  syntax:
    content: protected IEnumerator RunCustomUpdate()
    return:
      type: System.Collections.IEnumerator
    content.vb: Protected Function RunCustomUpdate As IEnumerator
  overload: Global.Singleton_MemoryManager.RunCustomUpdate*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Global.Singleton_MemoryManager.ClearMemory
  commentId: M:Global.Singleton_MemoryManager.ClearMemory
  id: ClearMemory
  parent: Global.Singleton_MemoryManager
  langs:
  - csharp
  - vb
  name: ClearMemory()
  nameWithType: Singleton_MemoryManager.ClearMemory()
  fullName: Singleton_MemoryManager.ClearMemory()
  type: Method
  source:
    id: ClearMemory
    path: ''
    startLine: 19431
  assemblies:
  - cs.temp.dll
  namespace: Global
  summary: "\nUse this to force clean\n"
  example: []
  syntax:
    content: public static void ClearMemory()
    content.vb: Public Shared Sub ClearMemory
  overload: Global.Singleton_MemoryManager.ClearMemory*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Global
  name: Global
  nameWithType: Global
  fullName: Global
  nameWithType.vb: ''
  fullName.vb: ''
  name.vb: ''
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Global.Singleton{Singleton_MemoryManager}
  commentId: T:Global.Singleton{Singleton_MemoryManager}
  definition: Global.Singleton`1
  name: Singleton<Singleton_MemoryManager>
  nameWithType: Singleton<Singleton_MemoryManager>
  fullName: Singleton<Singleton_MemoryManager>
  nameWithType.vb: Singleton(Of Singleton_MemoryManager)
  fullName.vb: Singleton(Of Singleton_MemoryManager)
  name.vb: Singleton(Of Singleton_MemoryManager)
  spec.csharp:
  - uid: Global.Singleton`1
    name: Singleton
    nameWithType: Singleton
    fullName: Singleton
  - name: <
    nameWithType: <
    fullName: <
  - uid: Global.Singleton_MemoryManager
    name: Singleton_MemoryManager
    nameWithType: Singleton_MemoryManager
    fullName: Singleton_MemoryManager
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Global.Singleton`1
    name: Singleton
    nameWithType: Singleton
    fullName: Singleton
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Global.Singleton_MemoryManager
    name: Singleton_MemoryManager
    nameWithType: Singleton_MemoryManager
    fullName: Singleton_MemoryManager
  - name: )
    nameWithType: )
    fullName: )
- uid: Global.Singleton{Singleton_MemoryManager}.Instance
  commentId: P:Global.Singleton{Singleton_MemoryManager}.Instance
  parent: Global.Singleton{Singleton_MemoryManager}
  definition: Global.Singleton`1.Instance
  name: Instance
  nameWithType: Singleton<Singleton_MemoryManager>.Instance
  fullName: Singleton<Singleton_MemoryManager>.Instance
  nameWithType.vb: Singleton(Of Singleton_MemoryManager).Instance
  fullName.vb: Singleton(Of Singleton_MemoryManager).Instance
- uid: Global.Singleton{Singleton_MemoryManager}.StartCoroutine(System.Collections.IEnumerator)
  commentId: M:Global.Singleton{Singleton_MemoryManager}.StartCoroutine(System.Collections.IEnumerator)
  parent: Global.Singleton{Singleton_MemoryManager}
  definition: Global.Singleton`1.StartCoroutine(System.Collections.IEnumerator)
  name: StartCoroutine(IEnumerator)
  nameWithType: Singleton<Singleton_MemoryManager>.StartCoroutine(IEnumerator)
  fullName: Singleton<Singleton_MemoryManager>.StartCoroutine(System.Collections.IEnumerator)
  nameWithType.vb: Singleton(Of Singleton_MemoryManager).StartCoroutine(IEnumerator)
  fullName.vb: Singleton(Of Singleton_MemoryManager).StartCoroutine(System.Collections.IEnumerator)
  spec.csharp:
  - uid: Global.Singleton`1.StartCoroutine(System.Collections.IEnumerator)
    name: StartCoroutine
    nameWithType: Singleton<Singleton_MemoryManager>.StartCoroutine
    fullName: Singleton<Singleton_MemoryManager>.StartCoroutine
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.IEnumerator
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.IEnumerator
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Global.Singleton`1.StartCoroutine(System.Collections.IEnumerator)
    name: StartCoroutine
    nameWithType: Singleton(Of Singleton_MemoryManager).StartCoroutine
    fullName: Singleton(Of Singleton_MemoryManager).StartCoroutine
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.IEnumerator
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.IEnumerator
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Global.Singleton{Singleton_MemoryManager}.AddCallbacks(System.Boolean,System.Boolean,System.Boolean)
  commentId: M:Global.Singleton{Singleton_MemoryManager}.AddCallbacks(System.Boolean,System.Boolean,System.Boolean)
  parent: Global.Singleton{Singleton_MemoryManager}
  definition: Global.Singleton`1.AddCallbacks(System.Boolean,System.Boolean,System.Boolean)
  name: AddCallbacks(Boolean, Boolean, Boolean)
  nameWithType: Singleton<Singleton_MemoryManager>.AddCallbacks(Boolean, Boolean, Boolean)
  fullName: Singleton<Singleton_MemoryManager>.AddCallbacks(System.Boolean, System.Boolean, System.Boolean)
  nameWithType.vb: Singleton(Of Singleton_MemoryManager).AddCallbacks(Boolean, Boolean, Boolean)
  fullName.vb: Singleton(Of Singleton_MemoryManager).AddCallbacks(System.Boolean, System.Boolean, System.Boolean)
  spec.csharp:
  - uid: Global.Singleton`1.AddCallbacks(System.Boolean,System.Boolean,System.Boolean)
    name: AddCallbacks
    nameWithType: Singleton<Singleton_MemoryManager>.AddCallbacks
    fullName: Singleton<Singleton_MemoryManager>.AddCallbacks
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Global.Singleton`1.AddCallbacks(System.Boolean,System.Boolean,System.Boolean)
    name: AddCallbacks
    nameWithType: Singleton(Of Singleton_MemoryManager).AddCallbacks
    fullName: Singleton(Of Singleton_MemoryManager).AddCallbacks
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Global.Singleton{Singleton_MemoryManager}.Awake
  commentId: M:Global.Singleton{Singleton_MemoryManager}.Awake
  parent: Global.Singleton{Singleton_MemoryManager}
  definition: Global.Singleton`1.Awake
  name: Awake()
  nameWithType: Singleton<Singleton_MemoryManager>.Awake()
  fullName: Singleton<Singleton_MemoryManager>.Awake()
  nameWithType.vb: Singleton(Of Singleton_MemoryManager).Awake()
  fullName.vb: Singleton(Of Singleton_MemoryManager).Awake()
  spec.csharp:
  - uid: Global.Singleton`1.Awake
    name: Awake
    nameWithType: Singleton<Singleton_MemoryManager>.Awake
    fullName: Singleton<Singleton_MemoryManager>.Awake
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Global.Singleton`1.Awake
    name: Awake
    nameWithType: Singleton(Of Singleton_MemoryManager).Awake
    fullName: Singleton(Of Singleton_MemoryManager).Awake
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Global.Singleton{Singleton_MemoryManager}.Update
  commentId: M:Global.Singleton{Singleton_MemoryManager}.Update
  parent: Global.Singleton{Singleton_MemoryManager}
  definition: Global.Singleton`1.Update
  name: Update()
  nameWithType: Singleton<Singleton_MemoryManager>.Update()
  fullName: Singleton<Singleton_MemoryManager>.Update()
  nameWithType.vb: Singleton(Of Singleton_MemoryManager).Update()
  fullName.vb: Singleton(Of Singleton_MemoryManager).Update()
  spec.csharp:
  - uid: Global.Singleton`1.Update
    name: Update
    nameWithType: Singleton<Singleton_MemoryManager>.Update
    fullName: Singleton<Singleton_MemoryManager>.Update
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Global.Singleton`1.Update
    name: Update
    nameWithType: Singleton(Of Singleton_MemoryManager).Update
    fullName: Singleton(Of Singleton_MemoryManager).Update
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Global.Singleton`1
  commentId: T:Global.Singleton`1
  name: Singleton<T>
  nameWithType: Singleton<T>
  fullName: Singleton<T>
  nameWithType.vb: Singleton(Of T)
  fullName.vb: Singleton(Of T)
  name.vb: Singleton(Of T)
  spec.csharp:
  - uid: Global.Singleton`1
    name: Singleton
    nameWithType: Singleton
    fullName: Singleton
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Global.Singleton`1
    name: Singleton
    nameWithType: Singleton
    fullName: Singleton
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Global.Singleton`1.Instance
  commentId: P:Global.Singleton`1.Instance
  name: Instance
  nameWithType: Singleton<T>.Instance
  fullName: Singleton<T>.Instance
  nameWithType.vb: Singleton(Of T).Instance
  fullName.vb: Singleton(Of T).Instance
- uid: Global.Singleton`1.StartCoroutine(System.Collections.IEnumerator)
  commentId: M:Global.Singleton`1.StartCoroutine(System.Collections.IEnumerator)
  isExternal: true
  name: StartCoroutine(IEnumerator)
  nameWithType: Singleton<T>.StartCoroutine(IEnumerator)
  fullName: Singleton<T>.StartCoroutine(System.Collections.IEnumerator)
  nameWithType.vb: Singleton(Of T).StartCoroutine(IEnumerator)
  fullName.vb: Singleton(Of T).StartCoroutine(System.Collections.IEnumerator)
  spec.csharp:
  - uid: Global.Singleton`1.StartCoroutine(System.Collections.IEnumerator)
    name: StartCoroutine
    nameWithType: Singleton<T>.StartCoroutine
    fullName: Singleton<T>.StartCoroutine
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.IEnumerator
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.IEnumerator
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Global.Singleton`1.StartCoroutine(System.Collections.IEnumerator)
    name: StartCoroutine
    nameWithType: Singleton(Of T).StartCoroutine
    fullName: Singleton(Of T).StartCoroutine
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.IEnumerator
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.IEnumerator
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Global.Singleton`1.AddCallbacks(System.Boolean,System.Boolean,System.Boolean)
  commentId: M:Global.Singleton`1.AddCallbacks(System.Boolean,System.Boolean,System.Boolean)
  isExternal: true
  name: AddCallbacks(Boolean, Boolean, Boolean)
  nameWithType: Singleton<T>.AddCallbacks(Boolean, Boolean, Boolean)
  fullName: Singleton<T>.AddCallbacks(System.Boolean, System.Boolean, System.Boolean)
  nameWithType.vb: Singleton(Of T).AddCallbacks(Boolean, Boolean, Boolean)
  fullName.vb: Singleton(Of T).AddCallbacks(System.Boolean, System.Boolean, System.Boolean)
  spec.csharp:
  - uid: Global.Singleton`1.AddCallbacks(System.Boolean,System.Boolean,System.Boolean)
    name: AddCallbacks
    nameWithType: Singleton<T>.AddCallbacks
    fullName: Singleton<T>.AddCallbacks
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Global.Singleton`1.AddCallbacks(System.Boolean,System.Boolean,System.Boolean)
    name: AddCallbacks
    nameWithType: Singleton(Of T).AddCallbacks
    fullName: Singleton(Of T).AddCallbacks
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Global.Singleton`1.Awake
  commentId: M:Global.Singleton`1.Awake
  name: Awake()
  nameWithType: Singleton<T>.Awake()
  fullName: Singleton<T>.Awake()
  nameWithType.vb: Singleton(Of T).Awake()
  fullName.vb: Singleton(Of T).Awake()
  spec.csharp:
  - uid: Global.Singleton`1.Awake
    name: Awake
    nameWithType: Singleton<T>.Awake
    fullName: Singleton<T>.Awake
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Global.Singleton`1.Awake
    name: Awake
    nameWithType: Singleton(Of T).Awake
    fullName: Singleton(Of T).Awake
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Global.Singleton`1.Update
  commentId: M:Global.Singleton`1.Update
  name: Update()
  nameWithType: Singleton<T>.Update()
  fullName: Singleton<T>.Update()
  nameWithType.vb: Singleton(Of T).Update()
  fullName.vb: Singleton(Of T).Update()
  spec.csharp:
  - uid: Global.Singleton`1.Update
    name: Update
    nameWithType: Singleton<T>.Update
    fullName: Singleton<T>.Update
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Global.Singleton`1.Update
    name: Update
    nameWithType: Singleton(Of T).Update
    fullName: Singleton(Of T).Update
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Global.Singleton_MemoryManager.imageFolderPath*
  commentId: Overload:Global.Singleton_MemoryManager.imageFolderPath
  name: imageFolderPath
  nameWithType: Singleton_MemoryManager.imageFolderPath
  fullName: Singleton_MemoryManager.imageFolderPath
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Global.Singleton_MemoryManager.messageFolderPath*
  commentId: Overload:Global.Singleton_MemoryManager.messageFolderPath
  name: messageFolderPath
  nameWithType: Singleton_MemoryManager.messageFolderPath
  fullName: Singleton_MemoryManager.messageFolderPath
- uid: Global.Singleton_MemoryManager.seriesFolderPath*
  commentId: Overload:Global.Singleton_MemoryManager.seriesFolderPath
  name: seriesFolderPath
  nameWithType: Singleton_MemoryManager.seriesFolderPath
  fullName: Singleton_MemoryManager.seriesFolderPath
- uid: Global.Singleton_MemoryManager.loaded*
  commentId: Overload:Global.Singleton_MemoryManager.loaded
  name: loaded
  nameWithType: Singleton_MemoryManager.loaded
  fullName: Singleton_MemoryManager.loaded
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Global.Singleton_MemoryManager.ShouldClearFrequently*
  commentId: Overload:Global.Singleton_MemoryManager.ShouldClearFrequently
  name: ShouldClearFrequently
  nameWithType: Singleton_MemoryManager.ShouldClearFrequently
  fullName: Singleton_MemoryManager.ShouldClearFrequently
- uid: Global.Singleton{Singleton_MemoryManager}.Start
  commentId: M:Global.Singleton{Singleton_MemoryManager}.Start
  parent: Global.Singleton{Singleton_MemoryManager}
  definition: Global.Singleton`1.Start
  name: Start()
  nameWithType: Singleton<Singleton_MemoryManager>.Start()
  fullName: Singleton<Singleton_MemoryManager>.Start()
  nameWithType.vb: Singleton(Of Singleton_MemoryManager).Start()
  fullName.vb: Singleton(Of Singleton_MemoryManager).Start()
  spec.csharp:
  - uid: Global.Singleton`1.Start
    name: Start
    nameWithType: Singleton<Singleton_MemoryManager>.Start
    fullName: Singleton<Singleton_MemoryManager>.Start
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Global.Singleton`1.Start
    name: Start
    nameWithType: Singleton(Of Singleton_MemoryManager).Start
    fullName: Singleton(Of Singleton_MemoryManager).Start
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Global.Singleton_MemoryManager.Start*
  commentId: Overload:Global.Singleton_MemoryManager.Start
  name: Start
  nameWithType: Singleton_MemoryManager.Start
  fullName: Singleton_MemoryManager.Start
- uid: Global.Singleton`1.Start
  commentId: M:Global.Singleton`1.Start
  name: Start()
  nameWithType: Singleton<T>.Start()
  fullName: Singleton<T>.Start()
  nameWithType.vb: Singleton(Of T).Start()
  fullName.vb: Singleton(Of T).Start()
  spec.csharp:
  - uid: Global.Singleton`1.Start
    name: Start
    nameWithType: Singleton<T>.Start
    fullName: Singleton<T>.Start
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Global.Singleton`1.Start
    name: Start
    nameWithType: Singleton(Of T).Start
    fullName: Singleton(Of T).Start
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Global.Singleton_MemoryManager.RunCustomUpdate*
  commentId: Overload:Global.Singleton_MemoryManager.RunCustomUpdate
  name: RunCustomUpdate
  nameWithType: Singleton_MemoryManager.RunCustomUpdate
  fullName: Singleton_MemoryManager.RunCustomUpdate
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: Global.Singleton_MemoryManager.ClearMemory*
  commentId: Overload:Global.Singleton_MemoryManager.ClearMemory
  name: ClearMemory
  nameWithType: Singleton_MemoryManager.ClearMemory
  fullName: Singleton_MemoryManager.ClearMemory
