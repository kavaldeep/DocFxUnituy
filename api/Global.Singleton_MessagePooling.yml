### YamlMime:ManagedReference
items:
- uid: Global.Singleton_MessagePooling
  commentId: T:Global.Singleton_MessagePooling
  id: Singleton_MessagePooling
  parent: Global
  children:
  - Global.Singleton_MessagePooling.ClearMessages
  - Global.Singleton_MessagePooling.loaded
  langs:
  - csharp
  - vb
  name: Singleton_MessagePooling
  nameWithType: Singleton_MessagePooling
  fullName: Singleton_MessagePooling
  type: Class
  source:
    id: Singleton_MessagePooling
    path: ''
    startLine: 19461
  assemblies:
  - cs.temp.dll
  namespace: Global
  summary: "\nTODO : YOU HAVE TO COMPLETE THIS FOLLOWING THE ARCHITECTURE OF THE OTHER POOLS\nTODO : OR NOT YOU MIGHT USE WHAT YOU WANT AS LONG AS loaded CAN BECOME TRUE AT ONE POINT\n"
  example: []
  syntax:
    content: 'public class Singleton_MessagePooling : Singleton<Singleton_MessagePooling>'
    content.vb: >-
      Public Class Singleton_MessagePooling
          Inherits Singleton(Of Singleton_MessagePooling)
  inheritance:
  - System.Object
  - Global.Singleton{Singleton_MessagePooling}
  inheritedMembers:
  - Global.Singleton{Singleton_MessagePooling}.Instance
  - Global.Singleton{Singleton_MessagePooling}.StartCoroutine(System.Collections.IEnumerator)
  - Global.Singleton{Singleton_MessagePooling}.AddCallbacks(System.Boolean,System.Boolean,System.Boolean)
  - Global.Singleton{Singleton_MessagePooling}.Awake
  - Global.Singleton{Singleton_MessagePooling}.Start
  - Global.Singleton{Singleton_MessagePooling}.Update
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Global.Singleton_MessagePooling.loaded
  commentId: P:Global.Singleton_MessagePooling.loaded
  id: loaded
  parent: Global.Singleton_MessagePooling
  langs:
  - csharp
  - vb
  name: loaded
  nameWithType: Singleton_MessagePooling.loaded
  fullName: Singleton_MessagePooling.loaded
  type: Property
  source:
    id: loaded
    path: ''
    startLine: 19463
  assemblies:
  - cs.temp.dll
  namespace: Global
  syntax:
    content: public bool loaded { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property loaded As Boolean
  overload: Global.Singleton_MessagePooling.loaded*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Global.Singleton_MessagePooling.ClearMessages
  commentId: M:Global.Singleton_MessagePooling.ClearMessages
  id: ClearMessages
  parent: Global.Singleton_MessagePooling
  langs:
  - csharp
  - vb
  name: ClearMessages()
  nameWithType: Singleton_MessagePooling.ClearMessages()
  fullName: Singleton_MessagePooling.ClearMessages()
  type: Method
  source:
    id: ClearMessages
    path: ''
    startLine: 19471
  assemblies:
  - cs.temp.dll
  namespace: Global
  syntax:
    content: public static void ClearMessages()
    content.vb: Public Shared Sub ClearMessages
  overload: Global.Singleton_MessagePooling.ClearMessages*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Global
  name: Global
  nameWithType: Global
  fullName: Global
  nameWithType.vb: ''
  fullName.vb: ''
  name.vb: ''
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Global.Singleton{Singleton_MessagePooling}
  commentId: T:Global.Singleton{Singleton_MessagePooling}
  definition: Global.Singleton`1
  name: Singleton<Singleton_MessagePooling>
  nameWithType: Singleton<Singleton_MessagePooling>
  fullName: Singleton<Singleton_MessagePooling>
  nameWithType.vb: Singleton(Of Singleton_MessagePooling)
  fullName.vb: Singleton(Of Singleton_MessagePooling)
  name.vb: Singleton(Of Singleton_MessagePooling)
  spec.csharp:
  - uid: Global.Singleton`1
    name: Singleton
    nameWithType: Singleton
    fullName: Singleton
  - name: <
    nameWithType: <
    fullName: <
  - uid: Global.Singleton_MessagePooling
    name: Singleton_MessagePooling
    nameWithType: Singleton_MessagePooling
    fullName: Singleton_MessagePooling
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Global.Singleton`1
    name: Singleton
    nameWithType: Singleton
    fullName: Singleton
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Global.Singleton_MessagePooling
    name: Singleton_MessagePooling
    nameWithType: Singleton_MessagePooling
    fullName: Singleton_MessagePooling
  - name: )
    nameWithType: )
    fullName: )
- uid: Global.Singleton{Singleton_MessagePooling}.Instance
  commentId: P:Global.Singleton{Singleton_MessagePooling}.Instance
  parent: Global.Singleton{Singleton_MessagePooling}
  definition: Global.Singleton`1.Instance
  name: Instance
  nameWithType: Singleton<Singleton_MessagePooling>.Instance
  fullName: Singleton<Singleton_MessagePooling>.Instance
  nameWithType.vb: Singleton(Of Singleton_MessagePooling).Instance
  fullName.vb: Singleton(Of Singleton_MessagePooling).Instance
- uid: Global.Singleton{Singleton_MessagePooling}.StartCoroutine(System.Collections.IEnumerator)
  commentId: M:Global.Singleton{Singleton_MessagePooling}.StartCoroutine(System.Collections.IEnumerator)
  parent: Global.Singleton{Singleton_MessagePooling}
  definition: Global.Singleton`1.StartCoroutine(System.Collections.IEnumerator)
  name: StartCoroutine(IEnumerator)
  nameWithType: Singleton<Singleton_MessagePooling>.StartCoroutine(IEnumerator)
  fullName: Singleton<Singleton_MessagePooling>.StartCoroutine(System.Collections.IEnumerator)
  nameWithType.vb: Singleton(Of Singleton_MessagePooling).StartCoroutine(IEnumerator)
  fullName.vb: Singleton(Of Singleton_MessagePooling).StartCoroutine(System.Collections.IEnumerator)
  spec.csharp:
  - uid: Global.Singleton`1.StartCoroutine(System.Collections.IEnumerator)
    name: StartCoroutine
    nameWithType: Singleton<Singleton_MessagePooling>.StartCoroutine
    fullName: Singleton<Singleton_MessagePooling>.StartCoroutine
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.IEnumerator
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.IEnumerator
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Global.Singleton`1.StartCoroutine(System.Collections.IEnumerator)
    name: StartCoroutine
    nameWithType: Singleton(Of Singleton_MessagePooling).StartCoroutine
    fullName: Singleton(Of Singleton_MessagePooling).StartCoroutine
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.IEnumerator
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.IEnumerator
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Global.Singleton{Singleton_MessagePooling}.AddCallbacks(System.Boolean,System.Boolean,System.Boolean)
  commentId: M:Global.Singleton{Singleton_MessagePooling}.AddCallbacks(System.Boolean,System.Boolean,System.Boolean)
  parent: Global.Singleton{Singleton_MessagePooling}
  definition: Global.Singleton`1.AddCallbacks(System.Boolean,System.Boolean,System.Boolean)
  name: AddCallbacks(Boolean, Boolean, Boolean)
  nameWithType: Singleton<Singleton_MessagePooling>.AddCallbacks(Boolean, Boolean, Boolean)
  fullName: Singleton<Singleton_MessagePooling>.AddCallbacks(System.Boolean, System.Boolean, System.Boolean)
  nameWithType.vb: Singleton(Of Singleton_MessagePooling).AddCallbacks(Boolean, Boolean, Boolean)
  fullName.vb: Singleton(Of Singleton_MessagePooling).AddCallbacks(System.Boolean, System.Boolean, System.Boolean)
  spec.csharp:
  - uid: Global.Singleton`1.AddCallbacks(System.Boolean,System.Boolean,System.Boolean)
    name: AddCallbacks
    nameWithType: Singleton<Singleton_MessagePooling>.AddCallbacks
    fullName: Singleton<Singleton_MessagePooling>.AddCallbacks
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Global.Singleton`1.AddCallbacks(System.Boolean,System.Boolean,System.Boolean)
    name: AddCallbacks
    nameWithType: Singleton(Of Singleton_MessagePooling).AddCallbacks
    fullName: Singleton(Of Singleton_MessagePooling).AddCallbacks
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Global.Singleton{Singleton_MessagePooling}.Awake
  commentId: M:Global.Singleton{Singleton_MessagePooling}.Awake
  parent: Global.Singleton{Singleton_MessagePooling}
  definition: Global.Singleton`1.Awake
  name: Awake()
  nameWithType: Singleton<Singleton_MessagePooling>.Awake()
  fullName: Singleton<Singleton_MessagePooling>.Awake()
  nameWithType.vb: Singleton(Of Singleton_MessagePooling).Awake()
  fullName.vb: Singleton(Of Singleton_MessagePooling).Awake()
  spec.csharp:
  - uid: Global.Singleton`1.Awake
    name: Awake
    nameWithType: Singleton<Singleton_MessagePooling>.Awake
    fullName: Singleton<Singleton_MessagePooling>.Awake
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Global.Singleton`1.Awake
    name: Awake
    nameWithType: Singleton(Of Singleton_MessagePooling).Awake
    fullName: Singleton(Of Singleton_MessagePooling).Awake
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Global.Singleton{Singleton_MessagePooling}.Start
  commentId: M:Global.Singleton{Singleton_MessagePooling}.Start
  parent: Global.Singleton{Singleton_MessagePooling}
  definition: Global.Singleton`1.Start
  name: Start()
  nameWithType: Singleton<Singleton_MessagePooling>.Start()
  fullName: Singleton<Singleton_MessagePooling>.Start()
  nameWithType.vb: Singleton(Of Singleton_MessagePooling).Start()
  fullName.vb: Singleton(Of Singleton_MessagePooling).Start()
  spec.csharp:
  - uid: Global.Singleton`1.Start
    name: Start
    nameWithType: Singleton<Singleton_MessagePooling>.Start
    fullName: Singleton<Singleton_MessagePooling>.Start
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Global.Singleton`1.Start
    name: Start
    nameWithType: Singleton(Of Singleton_MessagePooling).Start
    fullName: Singleton(Of Singleton_MessagePooling).Start
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Global.Singleton{Singleton_MessagePooling}.Update
  commentId: M:Global.Singleton{Singleton_MessagePooling}.Update
  parent: Global.Singleton{Singleton_MessagePooling}
  definition: Global.Singleton`1.Update
  name: Update()
  nameWithType: Singleton<Singleton_MessagePooling>.Update()
  fullName: Singleton<Singleton_MessagePooling>.Update()
  nameWithType.vb: Singleton(Of Singleton_MessagePooling).Update()
  fullName.vb: Singleton(Of Singleton_MessagePooling).Update()
  spec.csharp:
  - uid: Global.Singleton`1.Update
    name: Update
    nameWithType: Singleton<Singleton_MessagePooling>.Update
    fullName: Singleton<Singleton_MessagePooling>.Update
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Global.Singleton`1.Update
    name: Update
    nameWithType: Singleton(Of Singleton_MessagePooling).Update
    fullName: Singleton(Of Singleton_MessagePooling).Update
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Global.Singleton`1
  commentId: T:Global.Singleton`1
  name: Singleton<T>
  nameWithType: Singleton<T>
  fullName: Singleton<T>
  nameWithType.vb: Singleton(Of T)
  fullName.vb: Singleton(Of T)
  name.vb: Singleton(Of T)
  spec.csharp:
  - uid: Global.Singleton`1
    name: Singleton
    nameWithType: Singleton
    fullName: Singleton
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Global.Singleton`1
    name: Singleton
    nameWithType: Singleton
    fullName: Singleton
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Global.Singleton`1.Instance
  commentId: P:Global.Singleton`1.Instance
  name: Instance
  nameWithType: Singleton<T>.Instance
  fullName: Singleton<T>.Instance
  nameWithType.vb: Singleton(Of T).Instance
  fullName.vb: Singleton(Of T).Instance
- uid: Global.Singleton`1.StartCoroutine(System.Collections.IEnumerator)
  commentId: M:Global.Singleton`1.StartCoroutine(System.Collections.IEnumerator)
  isExternal: true
  name: StartCoroutine(IEnumerator)
  nameWithType: Singleton<T>.StartCoroutine(IEnumerator)
  fullName: Singleton<T>.StartCoroutine(System.Collections.IEnumerator)
  nameWithType.vb: Singleton(Of T).StartCoroutine(IEnumerator)
  fullName.vb: Singleton(Of T).StartCoroutine(System.Collections.IEnumerator)
  spec.csharp:
  - uid: Global.Singleton`1.StartCoroutine(System.Collections.IEnumerator)
    name: StartCoroutine
    nameWithType: Singleton<T>.StartCoroutine
    fullName: Singleton<T>.StartCoroutine
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.IEnumerator
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.IEnumerator
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Global.Singleton`1.StartCoroutine(System.Collections.IEnumerator)
    name: StartCoroutine
    nameWithType: Singleton(Of T).StartCoroutine
    fullName: Singleton(Of T).StartCoroutine
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.IEnumerator
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.IEnumerator
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Global.Singleton`1.AddCallbacks(System.Boolean,System.Boolean,System.Boolean)
  commentId: M:Global.Singleton`1.AddCallbacks(System.Boolean,System.Boolean,System.Boolean)
  isExternal: true
  name: AddCallbacks(Boolean, Boolean, Boolean)
  nameWithType: Singleton<T>.AddCallbacks(Boolean, Boolean, Boolean)
  fullName: Singleton<T>.AddCallbacks(System.Boolean, System.Boolean, System.Boolean)
  nameWithType.vb: Singleton(Of T).AddCallbacks(Boolean, Boolean, Boolean)
  fullName.vb: Singleton(Of T).AddCallbacks(System.Boolean, System.Boolean, System.Boolean)
  spec.csharp:
  - uid: Global.Singleton`1.AddCallbacks(System.Boolean,System.Boolean,System.Boolean)
    name: AddCallbacks
    nameWithType: Singleton<T>.AddCallbacks
    fullName: Singleton<T>.AddCallbacks
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Global.Singleton`1.AddCallbacks(System.Boolean,System.Boolean,System.Boolean)
    name: AddCallbacks
    nameWithType: Singleton(Of T).AddCallbacks
    fullName: Singleton(Of T).AddCallbacks
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Global.Singleton`1.Awake
  commentId: M:Global.Singleton`1.Awake
  name: Awake()
  nameWithType: Singleton<T>.Awake()
  fullName: Singleton<T>.Awake()
  nameWithType.vb: Singleton(Of T).Awake()
  fullName.vb: Singleton(Of T).Awake()
  spec.csharp:
  - uid: Global.Singleton`1.Awake
    name: Awake
    nameWithType: Singleton<T>.Awake
    fullName: Singleton<T>.Awake
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Global.Singleton`1.Awake
    name: Awake
    nameWithType: Singleton(Of T).Awake
    fullName: Singleton(Of T).Awake
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Global.Singleton`1.Start
  commentId: M:Global.Singleton`1.Start
  name: Start()
  nameWithType: Singleton<T>.Start()
  fullName: Singleton<T>.Start()
  nameWithType.vb: Singleton(Of T).Start()
  fullName.vb: Singleton(Of T).Start()
  spec.csharp:
  - uid: Global.Singleton`1.Start
    name: Start
    nameWithType: Singleton<T>.Start
    fullName: Singleton<T>.Start
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Global.Singleton`1.Start
    name: Start
    nameWithType: Singleton(Of T).Start
    fullName: Singleton(Of T).Start
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Global.Singleton`1.Update
  commentId: M:Global.Singleton`1.Update
  name: Update()
  nameWithType: Singleton<T>.Update()
  fullName: Singleton<T>.Update()
  nameWithType.vb: Singleton(Of T).Update()
  fullName.vb: Singleton(Of T).Update()
  spec.csharp:
  - uid: Global.Singleton`1.Update
    name: Update
    nameWithType: Singleton<T>.Update
    fullName: Singleton<T>.Update
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Global.Singleton`1.Update
    name: Update
    nameWithType: Singleton(Of T).Update
    fullName: Singleton(Of T).Update
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Global.Singleton_MessagePooling.loaded*
  commentId: Overload:Global.Singleton_MessagePooling.loaded
  name: loaded
  nameWithType: Singleton_MessagePooling.loaded
  fullName: Singleton_MessagePooling.loaded
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Global.Singleton_MessagePooling.ClearMessages*
  commentId: Overload:Global.Singleton_MessagePooling.ClearMessages
  name: ClearMessages
  nameWithType: Singleton_MessagePooling.ClearMessages
  fullName: Singleton_MessagePooling.ClearMessages
